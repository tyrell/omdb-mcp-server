name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pages: write
  actions: read
  security-events: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🎉 OMDB MCP Server ${{ steps.get_version.outputs.version }}
          
          ### 🚀 Features
          - Complete MCP 2024-11-05 protocol implementation
          - Three powerful movie search tools (search, details by title, details by IMDB ID)
          - Production-ready Spring Boot application with Java 21
          - Docker support with multi-platform builds (AMD64/ARM64)
          - Health checks and monitoring with Spring Boot Actuator
          - Security scanning with Trivy
          - Code coverage reporting with JaCoCo
          
          ### 🏗️ Technical Stack
          - Java 21 with Lombok
          - Spring Boot 3.5.4 with WebFlux
          - Maven build system
          - Docker multi-stage builds
          - GitHub Actions CI/CD
          
          ### 📦 Installation
          
          **Docker (Recommended):**
          ```bash
          docker run -p 8080:8080 -e OMDB_API_KEY=your-key ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          ```
          
          **JAR Download:**
          Download the JAR file from the assets below and run with:
          ```bash
          java -jar omdb-mcp-server-${{ steps.get_version.outputs.version }}.jar --omdb.api.key=your-key
          ```

  build-and-release:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: ./mvnw clean package -DskipTests
    
    - name: Find JAR file
      id: find_jar
      run: |
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        echo "jar_file=${JAR_FILE}" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename ${JAR_FILE})" >> $GITHUB_OUTPUT
    
    - name: Upload JAR to Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: ${{ steps.find_jar.outputs.jar_file }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  publish-docs:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release]
    if: always() && needs.build-and-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: maven
    
    - name: Generate documentation
      run: |
        ./mvnw clean compile
        ./mvnw javadoc:javadoc
      continue-on-error: true
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/site/apidocs
        destination_dir: docs/${{ needs.create-release.outputs.version }}